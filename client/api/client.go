// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api

func (c *Client) GetArtists(options Options) (*GetArtists, error) {
	path := "/api/v1/artists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetArtists](data)
}

func (c *Client) GetArtistById(id string, options Options) (*GetArtistById, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetArtistById](data)
}

func (c *Client) GetArtistAlbums(id string, options Options) (*GetArtistAlbumsById, error) {
	path := Sprintf("/api/v1/artists/%v/albums", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetArtistAlbumsById](data)
}

func (c *Client) GetAlbums(options Options) (*GetAlbums, error) {
	path := "/api/v1/albums"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetAlbums](data)
}

func (c *Client) GetAlbumById(id string, options Options) (*GetAlbumById, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetAlbumById](data)
}

func (c *Client) GetAlbumTracks(id string, options Options) (*GetAlbumTracksById, error) {
	path := Sprintf("/api/v1/albums/%v/tracks", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetAlbumTracksById](data)
}

func (c *Client) EditAlbum(id string, body PatchAlbumBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		Token: c.token,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) DeleteAlbum(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) ImportAlbum(body PostAlbumImportBody, options Options) (*PostAlbumImport, error) {
	path := "/api/v1/albums/import"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[PostAlbumImport](data)
}

func (c *Client) ImportTrackToAlbum(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v/import/track", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) GetTracks(options Options) (*GetTracks, error) {
	path := "/api/v1/tracks"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetTracks](data)
}

func (c *Client) GetTrackById(id string, options Options) (*GetTrackById, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetTrackById](data)
}

func (c *Client) RemoveTrack(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) EditTrack(id string, body PatchTrackBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		Token: c.token,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) GetTags(options Options) (*GetTags, error) {
	path := "/api/v1/tags"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetTags](data)
}

func (c *Client) Signup(body PostAuthSignupBody, options Options) (*PostAuthSignup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[PostAuthSignup](data)
}

func (c *Client) Signin(body PostAuthSigninBody, options Options) (*PostAuthSignin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[PostAuthSignin](data)
}

func (c *Client) GetMe(options Options) (*GetAuthMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetAuthMe](data)
}

func (c *Client) GetPlaylists(options Options) (*GetPlaylists, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetPlaylists](data)
}

func (c *Client) CreatePlaylist(body PostPlaylistBody, options Options) (*PostPlaylist, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[PostPlaylist](data)
}

func (c *Client) CreatePlaylistFromFilter(body PostPlaylistFilterBody, options Options) (*PostPlaylist, error) {
	path := "/api/v1/playlists/filter"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[PostPlaylist](data)
}

func (c *Client) GetPlaylistById(id string, options Options) (*GetPlaylistById, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetPlaylistById](data)
}

func (c *Client) AddItemsToPlaylist(id string, body PostPlaylistItemsByIdBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) DeletePlaylistItems(id string, body DeletePlaylistItemsByIdBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		Token: c.token,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) MovePlaylistItem(id string, body PostPlaylistsItemMoveByIdBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items/move", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		Token: c.token,
		Body: nil,
	}
	return Request[GetSystemInfo](data)
}

func (c *Client) SystemExport(options Options) (*any, error) {
	path := "/api/v1/system/export"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) SystemImport(options Options) (*any, error) {
	path := "/api/v1/system/import"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) Process(options Options) (*any, error) {
	path := "/api/v1/system/process"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		Token: c.token,
		Body: nil,
	}
	return Request[any](data)
}
