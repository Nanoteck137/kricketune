// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api

func (c *Client) GetArtists(options Options) (*GetArtists, error) {
	path := "/api/v1/artists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetArtists](data)
}

func (c *Client) SearchArtists(options Options) (*GetArtists, error) {
	path := "/api/v1/artists/search"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetArtists](data)
}

func (c *Client) GetArtistById(id string, options Options) (*GetArtistById, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetArtistById](data)
}

func (c *Client) GetArtistAlbums(id string, options Options) (*GetArtistAlbumsById, error) {
	path := Sprintf("/api/v1/artists/%v/albums", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetArtistAlbumsById](data)
}

func (c *Client) EditArtist(id string, body EditArtistBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) CreateArtist(body CreateArtistBody, options Options) (*CreateArtist, error) {
	path := "/api/v1/artists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreateArtist](data)
}

func (c *Client) MergeArtists(id string, body MergeArtistsBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/artists/%v/merge", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) DeleteArtist(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) GetAlbums(options Options) (*GetAlbums, error) {
	path := "/api/v1/albums"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetAlbums](data)
}

func (c *Client) SearchAlbums(options Options) (*GetAlbums, error) {
	path := "/api/v1/albums/search"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetAlbums](data)
}

func (c *Client) GetAlbumById(id string, options Options) (*GetAlbumById, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetAlbumById](data)
}

func (c *Client) GetAlbumTracks(id string, options Options) (*GetAlbumTracks, error) {
	path := Sprintf("/api/v1/albums/%v/tracks", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetAlbumTracks](data)
}

func (c *Client) EditAlbum(id string, body EditAlbumBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) DeleteAlbum(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) CreateAlbum(body CreateAlbumBody, options Options) (*CreateAlbum, error) {
	path := "/api/v1/albums"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreateAlbum](data)
}

func (c *Client) GetTracks(options Options) (*GetTracks, error) {
	path := "/api/v1/tracks"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTracks](data)
}

func (c *Client) GetDetailedTracks(options Options) (*GetDetailedTracks, error) {
	path := "/api/v1/tracks/detailed"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetDetailedTracks](data)
}

func (c *Client) SearchTracks(options Options) (*GetTracks, error) {
	path := "/api/v1/tracks/search"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTracks](data)
}

func (c *Client) GetTrackById(id string, options Options) (*GetTrackById, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTrackById](data)
}

func (c *Client) GetDetailedTrackById(id string, options Options) (*GetDetailedTrackById, error) {
	path := Sprintf("/api/v1/tracks/%v/detailed", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetDetailedTrackById](data)
}

func (c *Client) EditTrack(id string, body EditTrackBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) DeleteTrack(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) Signup(body SignupBody, options Options) (*Signup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[Signup](data)
}

func (c *Client) Signin(body SigninBody, options Options) (*Signin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[Signin](data)
}

func (c *Client) ChangePassword(body ChangePasswordBody, options Options) (*any, error) {
	path := "/api/v1/auth/password"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) GetMe(options Options) (*GetMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetMe](data)
}

func (c *Client) GetPlaylists(options Options) (*GetPlaylists, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetPlaylists](data)
}

func (c *Client) CreatePlaylist(body CreatePlaylistBody, options Options) (*CreatePlaylist, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreatePlaylist](data)
}

func (c *Client) CreatePlaylistFromFilter(body PostPlaylistFilterBody, options Options) (*CreatePlaylist, error) {
	path := "/api/v1/playlists/filter"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreatePlaylist](data)
}

func (c *Client) GetPlaylistById(id string, options Options) (*GetPlaylistById, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetPlaylistById](data)
}

func (c *Client) GetPlaylistItems(id string, options Options) (*GetPlaylistItems, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetPlaylistItems](data)
}

func (c *Client) AddItemToPlaylist(id string, body AddItemToPlaylistBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) RemovePlaylistItem(id string, body RemovePlaylistItemBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetSystemInfo](data)
}

func (c *Client) SystemExport(options Options) (*Export, error) {
	path := "/api/v1/system/export"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[Export](data)
}

func (c *Client) Process(options Options) (*any, error) {
	path := "/api/v1/system/process"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) RefillSearch(options Options) (*any, error) {
	path := "/api/v1/system/search"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) GetTaglists(options Options) (*GetTaglists, error) {
	path := "/api/v1/taglists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTaglists](data)
}

func (c *Client) GetTaglistById(id string, options Options) (*GetTaglistById, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTaglistById](data)
}

func (c *Client) GetTaglistTracks(id string, options Options) (*GetTaglistTracks, error) {
	path := Sprintf("/api/v1/taglists/%v/tracks", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetTaglistTracks](data)
}

func (c *Client) CreateTaglist(body CreateTaglistBody, options Options) (*CreateTaglist, error) {
	path := "/api/v1/taglists"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreateTaglist](data)
}

func (c *Client) DeleteTaglist(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) UpdateTaglist(id string, body UpdateTaglistBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) UpdateUserSettings(body UpdateUserSettingsBody, options Options) (*any, error) {
	path := "/api/v1/user/settings"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) AddToUserQuickPlaylist(body TrackId, options Options) (*any, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) RemoveItemFromUserQuickPlaylist(body TrackId, options Options) (*any, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[any](data)
}

func (c *Client) GetUserQuickPlaylistItemIds(options Options) (*GetUserQuickPlaylistItemIds, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetUserQuickPlaylistItemIds](data)
}

func (c *Client) CreateApiToken(body CreateApiTokenBody, options Options) (*CreateApiToken, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[CreateApiToken](data)
}

func (c *Client) GetAllApiTokens(options Options) (*GetAllApiTokens, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[GetAllApiTokens](data)
}

func (c *Client) DeleteApiToken(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return Request[any](data)
}

func (c *Client) GetMediaFromPlaylist(playlistId string, body GetMediaFromPlaylistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/playlist/%v", playlistId)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) GetMediaFromTaglist(taglistId string, body GetMediaFromTaglistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/taglist/%v", taglistId)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) GetMediaFromFilter(body GetMediaFromFilterBody, options Options) (*GetMedia, error) {
	path := "/api/v1/media/filter"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) GetMediaFromArtist(artistId string, body GetMediaFromArtistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/artist/%v", artistId)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) GetMediaFromAlbum(albumId string, body GetMediaFromAlbumBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/album/%v", albumId)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) GetMediaFromIds(body GetMediaFromIdsBody, options Options) (*GetMedia, error) {
	path := "/api/v1/media/ids"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return Request[GetMedia](data)
}

func (c *Client) ChangeArtistPicture(id string, body Reader, options Options) (*any, error) {
	path := Sprintf("/api/v1/artists/%v/picture", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return RequestForm[any](data, options.Boundary, body)
}

func (c *Client) ChangeAlbumCover(id string, body Reader, options Options) (*any, error) {
	path := Sprintf("/api/v1/albums/%v/cover", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: nil,
	}
	return RequestForm[any](data, options.Boundary, body)
}

func (c *Client) UploadTrack(body Reader, options Options) (*any, error) {
	path := "/api/v1/tracks"
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		AuthToken: c.authToken,
		ApiToken: c.apiToken,
		Body: body,
	}
	return RequestForm[any](data, options.Boundary, body)
}
